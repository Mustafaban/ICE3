# ------------------------------------------------------------------------------------
# 1. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d
#     --- This command will start the container in detached mode without rebuilding the images (If they already exist)
#
# 2. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d --build
# --- This command forces the rebuild of images, even if the images already exist, before starting the containers
#
# ------------------------------------------------------------------------------------

version: '3.9'

services:

  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: ["start-dev" , "--import-realm"]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - backend

  postgres-keycloak:
    image: postgres
    ports:
      - "5431:5432"
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - backend

  product-services:
    image: product-service
    ports:
      - "8084:8084"
    build:
      context: ./product-service
      dockerfile: ./Dockerfile
    container_name: product-service
    environment:
      - MONGO_DB_USERNAME=admin
      - MONGO_DB_PWD=password
    depends_on:
      - mongodb
    networks:
      - backend

  order-services:
    image: order-service
    ports:
      - "8082:8082"
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    container_name: order-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/order_db
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-order
    networks:
      - backend

  inventory-services:
    image: inventory-service
    ports:
      - "8083:8083"
    build:
      context: ./inventory-service
      dockerfile: ./Dockerfile
    container_name: inventory-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory_db
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-inventory
    networks:
      - backend

  api-gateway:
    image: api-gateway
    build:
      context: ./api-gatway
      dockerfile: ./Dockerfile
    container_name: api-gateway
    environment:
      - services.product-url=http://product-service:8084
      - services.order-url=http://order-service:8082
    ports:
      - "9000:9000"
    depends_on:
      - product-services
      - order-services
    networks:
      - backend



  postgres-order:
    image: postgres
    container_name: postgres-order
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=order_db
    volumes:
      - ./data/postgres-user:/var/lib/postgresql/data
    networks:
      - backend

  postgres-inventory:
    image: postgres
    container_name: postgres-inventory
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory_db
    volumes:
      - ./data/postgres-room:/var/lib/postgresql/data
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "8088:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=group40@gbc.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    depends_on:
      - postgres-order
      - postgres-inventory
    networks:
      - backend

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo:/data/db
    networks:
      - backend

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: mongo-express
    depends_on:
      - mongodb
    networks:
      - backend

networks:
  backend:
    driver: bridge






